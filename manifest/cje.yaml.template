# Source: https://release-notes.cloudbees.com/product/140
---
# Source: cloudbees-core/templates/cjoc-configure-jenkins-groovy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cjoc-configure-jenkins-groovy
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: cjoc-configure-jenkins-groovy-config-map
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
data:
  location.groovy: |
    hudson.ExtensionList.lookupSingleton(com.cloudbees.jenkins.support.impl.cloudbees.TcpSlaveAgentListenerMonitor.class).disable(true)
    jenkins.model.JenkinsLocationConfiguration.get().setUrl("https://$publicHost/cjoc");
---
#registration-detail.json
apiVersion: v1
kind: ConfigMap
metadata:
  name: cjoc-registration-detail-json
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: cjoc-registration-detail-json-config-map
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
data:
  registration-detail.json: |
    {
      "firstname": "$customerFirstName",
      "lastname": "$customerLastName",
      "email": "$customerEmail",
      "company": "$customerCompany"
    }
---
#.cloudbees-referrer.txt
apiVersion: v1
kind: ConfigMap
metadata:
  name: cjoc-cloudbees-referrer-txt
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: cjoc-cloudbees-referrer-txt-config-map
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
data:
  .cloudbees-referrer.txt: |
    Core on Google Marketplace
---
# init.groovy license installation script
apiVersion: v1
kind: ConfigMap
metadata:
  name: cjoc-install-license-groovy
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: cjoc-install-license-groovy-config-map
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
data:
  init.groovy: |
    import com.cloudbees.opscenter.server.license.OperationsCenterEvaluationRegistrar;

    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.concurrent.ExecutionException;
    import java.util.logging.Logger;
    import java.util.stream.Collectors;
    import javax.servlet.ServletException;

    import net.sf.json.JSONObject;

    import hudson.license.LicenseManager;

    import jenkins.plugins.asynchttpclient.AHC;

    import com.cloudbees.jenkins.plugins.license.JenkinsHelper;
    import com.cloudbees.jenkins.plugins.license.nectar.EvaluationRegistrar;

    import groovy.transform.Field;
    import org.apache.commons.io.IOUtils;


    //Field = Global scope
    @Field Logger LOGGER = Logger.getLogger("com.cloudbees.groovy");
    LOGGER.info("Installing license for Core on Google Marketplace");

    main();

    //All code is in methods, so no surprises with lonely lines somewhere.
    def main() {

        if (LicenseManager.getConfigFile().exists()) {
            LOGGER.info("LICENSE EXISTS");

        } else {
            LOGGER.info("LICENSE NOT THERE, request for a Trial one.");
            JSONObject json = getRegistrationJSONObject();

            if(json != null){

                String company = json.get("company").toString();
                String email = json.get("email").toString();
                String firstname = json.get("firstname").toString();
                String lastname = json.get("lastname").toString();
                String productCode = OperationsCenterEvaluationRegistrar.EVAL_EDITION_MULTI_MASTER_SOURCE_TRIAL;

                requestTrialLicenseWithWizardCode(firstname,lastname,email,company,productCode,false,true);
            } else {
                LOGGER.info("WARNING:registration-detail.json Not Found.");
            }
            
        }

    }

    //Use the same classes as the one used by the wizard to get the Trial
    def requestTrialLicenseWithWizardCode(firstname,lastname,email,company,productCode,subscribe,agree) { 
        EvaluationRegistrar registrar = new OperationsCenterEvaluationRegistrar(null, null, null, null, true, false, null);
        registrar.register(firstname,lastname,email,company,subscribe,agree,productCode);
    }

    //Read customer data from JENKINS_HOME/registration-detail.json
    def getRegistrationJSONObject() {
        String jenkinsHome = JenkinsHelper.getInstance().getRootDir().toString();
        Path registrationFilePath = Paths.get(jenkinsHome, "registration-detail.json");

        if(registrationFilePath.toFile().exists()) {
            return JSONObject.fromObject(IOUtils.toString(new FileInputStream(registrationFilePath.toFile()), "UTF-8"));
        } else {
            return null;
        }
    }
---
# Source: cloudbees-core/templates/cjoc-jenkins-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: jenkins-agent
    labels:
        app.kubernetes.io/name: "$name"
        app.kubernetes.io/component: jenkins-agent-config-map
        app: cjoc
        chart: "cloudbees-core-3.4.0"
        release: "cloudbees-core"
        heritage: "Tiller"
data:
    jenkins-agent: |
        #!/usr/bin/env sh

        # The MIT License
        #
        #  Copyright (c) 2015, CloudBees, Inc.
        #
        #  Permission is hereby granted, free of charge, to any person obtaining a copy
        #  of this software and associated documentation files (the "Software"), to deal
        #  in the Software without restriction, including without limitation the rights
        #  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        #  copies of the Software, and to permit persons to whom the Software is
        #  furnished to do so, subject to the following conditions:
        #
        #  The above copyright notice and this permission notice shall be included in
        #  all copies or substantial portions of the Software.
        #
        #  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        #  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        #  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        #  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        #  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        #  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        #  THE SOFTWARE.

        # Usage jenkins-slave.sh [options] -url http://jenkins [SECRET] [AGENT_NAME]
        # Optional environment variables :
        # * JENKINS_TUNNEL : HOST:PORT for a tunnel to route TCP traffic to jenkins host, when jenkins can't be directly accessed over network
        # * JENKINS_URL : alternate jenkins URL
        # * JENKINS_SECRET : agent secret, if not set as an argument
        # * JENKINS_AGENT_NAME : agent name, if not set as an argument

        if [ $# -eq 1 ]; then

            # if `docker run` only has one arguments, we assume user is running alternate command like `bash` to inspect the image
            exec "$@"

        else

            # if -tunnel is not provided try env vars
            case "$@" in
                *"-tunnel "*) ;;
                *)
                if [ ! -z "$JENKINS_TUNNEL" ]; then
                    TUNNEL="-tunnel $JENKINS_TUNNEL"
                fi ;;
            esac

            if [ -n "$JENKINS_URL" ]; then
                URL="-url $JENKINS_URL"
            fi

            if [ -n "$JENKINS_NAME" ]; then
                JENKINS_AGENT_NAME="$JENKINS_NAME"
            fi

            if [ -z "$JNLP_PROTOCOL_OPTS" ]; then
                echo "Warning: JnlpProtocol3 is disabled by default, use JNLP_PROTOCOL_OPTS to alter the behavior"
                JNLP_PROTOCOL_OPTS="-Dorg.jenkinsci.remoting.engine.JnlpProtocol3.disabled=true"
            fi

            # If both required options are defined, do not pass the parameters
            OPT_JENKINS_SECRET=""
            if [ -n "$JENKINS_SECRET" ]; then
                case "$@" in
                    *"${JENKINS_SECRET}"*) echo "Warning: SECRET is defined twice in command-line arguments and the environment variable" ;;
                    *)
                    OPT_JENKINS_SECRET="${JENKINS_SECRET}" ;;
                esac
            fi

            OPT_JENKINS_AGENT_NAME=""
            if [ -n "$JENKINS_AGENT_NAME" ]; then
                case "$@" in
                    *"${JENKINS_AGENT_NAME}"*) echo "Warning: AGENT_NAME is defined twice in command-line arguments and the environment variable" ;;
                    *)
                    OPT_JENKINS_AGENT_NAME="${JENKINS_AGENT_NAME}" ;;
                esac
            fi

            SLAVE_JAR=/usr/share/jenkins/slave.jar
            if [ ! -f "$SLAVE_JAR" ]; then
                tmpfile=$(mktemp)
                if hash wget > /dev/null 2>&1; then
                    wget -O "$tmpfile" "$JENKINS_URL/jnlpJars/slave.jar"
                elif hash curl > /dev/null 2>&1; then
                    curl -o "$tmpfile" "$JENKINS_URL/jnlpJars/slave.jar"
                else
                    echo "Image does not include $SLAVE_JAR and could not find wget or curl to download it"
                    return 1
                fi
                SLAVE_JAR=$tmpfile
            fi

            #TODO: Handle the case when the command-line and Environment variable contain different values.
            #It is fine it blows up for now since it should lead to an error anyway.

            exec java $JAVA_OPTS $JNLP_PROTOCOL_OPTS -cp $SLAVE_JAR hudson.remoting.jnlp.Main -headless $TUNNEL $URL $OPT_JENKINS_SECRET $OPT_JENKINS_AGENT_NAME "$@"
        fi
---
# Source: cloudbees-core/templates/cjoc-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cjoc
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: cjoc-service
    app: cjoc
    heritage: "Tiller"
    release: "cloudbees-core"
    chart: "cloudbees-core-3.4.0"
    component: "cloudbees-core-jenkins-master"
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: jnlp
      port: 50000
      targetPort: 50000
      protocol: TCP
  selector:
    component: "cloudbees-core-jenkins-master"
    com.cloudbees.cje.tenant: cjoc
  type: ClusterIP

---
# Source: cloudbees-core/templates/cjoc-ingress.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cjoc
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: cjoc-ingress
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "false"
    nginx.ingress.kubernetes.io/app-root: "http://$best_http_host/cjoc/teams-check/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # "413 Request Entity Too Large" uploading plugins, increase client_max_body_size
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
spec:
  rules:
  - host: $publicHost
    http:
      paths:
      - path: /cjoc
        backend:
          serviceName: cjoc
          servicePort: 80
  tls:
  - hosts:
    - $publicHost
    secretName: $name-tls

---
# Source: cloudbees-core/templates/cjoc-statefulset.yaml
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  name: cjoc
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: cjoc-stateful-set
    com.cloudbees.cje.type: cjoc
    com.cloudbees.cje.tenant: cjoc
    heritage: "Tiller"
    release: "cloudbees-core"
    component: "cloudbees-core-cjoc"
spec:
  selector:
    matchLabels:
      com.cloudbees.cje.type: cjoc
      com.cloudbees.cje.tenant: cjoc
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  serviceName: cjoc
  template:
    metadata:
      name: cjoc
      labels:
        com.cloudbees.cje.type: cjoc
        com.cloudbees.cje.tenant: cjoc
        app: cjoc
        heritage: "Tiller"
        release: "cloudbees-core"
        component: "cloudbees-core-jenkins-master"
    spec:
      serviceAccountName: $operationsCenterServiceAccount
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      terminationGracePeriodSeconds: 10
      containers:
        - name: jenkins
          image: $cjocImage
          imagePullPolicy: "Always"
          env:
            - name: ENVIRONMENT
              value: KUBERNETES
            - name: JENKINS_OPTS
              value: "--prefix=/cjoc"
            - name: JAVA_OPTS
              # To allocate masters using a non-default storage class, add the following
              # -Dcom.cloudbees.masterprovisioning.kubernetes.KubernetesMasterProvisioning.storageClassName=some-storage-class
              value: >-
                -XshowSettings:vm
                -XX:MaxRAMFraction=1
                -XX:+UnlockExperimentalVMOptions
                -XX:+UseCGroupMemoryLimitForHeap
                -Dcb.IMProp.warProfiles.cje=kubernetes.json
                -Dcom.cloudbees.opscenter.analytics.reporter.JocAnalyticsReporter.PERIOD=120
                -Dcom.cloudbees.opscenter.analytics.reporter.metrics.AperiodicMetricSubmitter.PERIOD=120
                -Dcom.cloudbees.opscenter.analytics.FeederConfiguration.PERIOD=120
                -Dcom.cloudbees.masterprovisioning.kubernetes.KubernetesMasterProvisioning.fsGroup=1000
                -Dhudson.lifecycle=hudson.lifecycle.ExitLifecycle
                -Dcom.cloudbees.jce.masterprovisioning.DockerImageDefinitionConfiguration.disableAutoConfiguration=true
                -Dcom.cloudbees.jce.masterprovisioning.DockerImageDefinitionConfiguration.masterImageName="CloudBees Core - Managed Master - 2.176.4.3"
                -Dcom.cloudbees.jce.masterprovisioning.DockerImageDefinitionConfiguration.masterImage=$mmImage
                -Dcom.cloudbees.masterprovisioning.kubernetes.KubernetesMasterProvisioning.serviceAccount=$masterServiceAccount
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
          resources:
            limits:
              cpu: "1"
              memory: "1G"
            requests:
              cpu: "1"
              memory: "1G"
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
              readOnly: false
            - name: jenkins-configure-jenkins-groovy
              mountPath: /var/jenkins_config/configure-jenkins.groovy.d
              readOnly: true
            - name: jenkins-registration-detail-json
              mountPath: /var/jenkins_home/registration-detail.json
              subPath: registration-detail.json
              readOnly: true
            - name: jenkins-cloudbees-referrer-txt
              mountPath: /var/jenkins_home/.cloudbees-referrer.txt
              subPath: .cloudbees-referrer.txt
              readOnly: true
            - name: jenkins-install-license-groovy
              mountPath: /var/jenkins_home/init.groovy
              subPath: init.groovy
              readOnly: true
          livenessProbe:
            httpGet:
              path: /cjoc/login
              port: 8080
            initialDelaySeconds: 300
            timeoutSeconds: 5
            failureThreshold: 12
        - name: reporting-function
          image: $imageReportingFunction
          volumeMounts:
          - name: reporting-function-config
            mountPath: /etc/reporting-function
        - name: ubbagent
          image: $imageUbbagent
          env:
          - name: AGENT_CONFIG_FILE
            value: "/etc/ubbagent/config.yaml"
          - name: AGENT_LOCAL_PORT
            value: "4567"
          - name: AGENT_ENCODED_KEY
            valueFrom:
              secretKeyRef:
                name: test-reporting-secret #$reportingSecret
                key: reporting-key
          - name: AGENT_CONSUMER_ID
            valueFrom:
              secretKeyRef:
                name: test-reporting-secret #$reportingSecret
                key: consumer-id
          volumeMounts:
          - name: ubbagent-config
            mountPath: /etc/ubbagent
      volumes:
        - name: jenkins-configure-jenkins-groovy
          configMap:
            name: cjoc-configure-jenkins-groovy
        - name: ubbagent-config
          configMap:
            name: ubbagent-config
        - name: reporting-function-config
          configMap:
            name: reporting-function-config
        - name: jenkins-registration-detail-json
          configMap:
            name:  cjoc-registration-detail-json
        - name: jenkins-cloudbees-referrer-txt
          configMap:
            name:  cjoc-cloudbees-referrer-txt
        - name: jenkins-install-license-groovy
          configMap:
            name:  cjoc-install-license-groovy
  volumeClaimTemplates:
    - metadata:
        name: jenkins-home
        labels:
          app: cjoc
          release: "cloudbees-core"
          heritage: "Tiller"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"

#reporting function config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: reporting-function-config
data:
  config.json: |
    { "number-of-users": $numberOfUsers}

#ubbagent config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ubbagent-config
data:
  config.yaml: |
    # The identity section contains authentication information used
    # by the agent.
    identities:
    - name: gcp
      gcp:
        # This parameter accepts a base64-encoded JSON service
        # account key. The value comes from the reporting secret.
        encodedServiceAccountKey: $AGENT_ENCODED_KEY

    # The metrics section defines the metric that will be reported.
    # Metric names should match verbatim the identifiers created
    # during pricing setup.
    metrics:
    - name: user
      type: int

      # The endpoints section of a metric defines which endpoints the
      # metric data is sent to.
      endpoints:
      - name: on_disk
      - name: servicecontrol

      # The aggregation section indicates that reports that the agent
      # receives for this metric should be aggregated for a specified
      # period of time prior to being sent to the reporting endpoint.
      aggregation:
        bufferSeconds: 60

    - name: instance_time
      type: int
      endpoints:
      - name: on_disk
      - name: servicecontrol

      # The passthrough marker indicates that no aggregation should
      # occur for this metric. Reports received are immediately sent
      # to the reporting endpoint. We use passthrough for the
      # instance_time metric since reports are generated
      # automatically by a heartbeat source defined in a later
      # section.
      passthrough: {}

    # The endpoints section defines where metering data is ultimately
    # sent. Currently supported endpoints include:
    # * disk - some directory on the local filesystem
    # * servicecontrol - Google Service Control
    endpoints:
    - name: on_disk
      # The disk endpoint is useful for debugging, but its inclusion
      # is not necessary in a production deployment.
      disk:
        reportDir: /var/lib/ubbagent/reports
        expireSeconds: 3600
    - name: servicecontrol
      servicecontrol:
        identity: gcp
        # The service name is unique to your application and will be
        # provided during onboarding.
        serviceName: cloudbees-core-billable.mp-cloudbees.appspot.com
        consumerId: $AGENT_CONSUMER_ID  # From the reporting secret.

    # The sources section lists metric data sources run by the agent
    # itself. The currently-supported source is 'heartbeat', which
    # sends a defined value to a metric at a defined interval. In
    # this example, the heartbeat sends a 60-second value through the
    # "instance_time" metric every minute.
    sources:
    - name: instance_time_heartbeat
      heartbeat:
        metric: instance_time
        intervalSeconds: 60
        value:
          int64Value: 60
---
apiVersion: v1
data:
  consumer-id: cHJvamVjdDpwci14eHh4LWZha2UteHh4eA==
  entitlement-id: ZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZm
  reporting-key: ZXdvZ0lDSjBlWEJsSWpvZ0luTmxjblpwWTJWZllXTmpiM1Z1ZENJc0NpQWdJbkJ5YjJwbFkzUmZhV1FpT2lBaVkyeHZkV1F0YldGeWEyVjBjR3hoWTJVdGRHOXZiSE1pTEFvZ0lDSndjbWwyWVhSbFgydGxlVjlwWkNJNklDSm1OR1ppTUdRMk16TmhaRFEzWWpFd1pUSmhORFJqTTJaak1HWmlZakEzTlRrNE56Z3lZMkpqSWl3S0lDQWljSEpwZG1GMFpWOXJaWGtpT2lBaUxTMHRMUzFDUlVkSlRpQlFVa2xXUVZSRklFdEZXUzB0TFMwdFhHNU5TVWxGZGtGSlFrRkVRVTVDWjJ0eGFHdHBSemwzTUVKQlVVVkdRVUZUUTBKTFdYZG5aMU5wUVdkRlFVRnZTVUpCVVVONk1HOWlWbXh0VmpBNE1GVm9YRzV1WTNoMGQyZHlUVTFKTm1kMEsyTmhObFJxZGs0dmJrNW5hREZ1ZGsxVU1YUjBObnB0WWpaQ01HSTBTazF2V0V4SE4ycGpMM0Y1T1dKTGEwdERPRkEyWEc1bFdESmpXbkExWkVoT1VsQkZVRXhVWXpGV1RuQldZM0JQTm1ReFVYUnNWbTlOWVdVelZtTXlNbEYzTXpCQ2FsTkhTMU12V0U5V2IyUnNUeXRRTHpZM1hHNXhNMUZhVDNwWmJqRTRNakEyT0ZkM0wwVmxUM0UzWW1GdlQzQmllVlJEUlZRMlJUY3JPRzhyYVUxRVQxSklaVzVyTVRSck1rWjZSMjR6SzJOcU9VWklYRzVUTkhGQ0wxZFNLelF4Wm01bE5XOTFOVTVKU1hFMGFXVllWV2RsTnpaNk9GWXhaRE4xZFdGNWNGaGhZME50VEN0TVpGVnlZWFkxYjBSSU4zbEVTVUo2WEc1TWFHRkdTMjlsU0dKNlJGcFRkR2RTYVVKcFZqWkZielpoVFd4dU4wTndUR3hxYlZOUGRHb3JiVk5TYkhZemRFVTJibFU1TjFacU9FcHRhV05DUTNwV1hHNUpkRGx1TkhSelNFRm5UVUpCUVVWRFoyZEZRVUpTYm5Gd05rbHdlRVpKVW5WMFNUbEJUMWxhWlZaRldDOVhUMHRNYkZSQ2RpdFBUR1JvTWtRdmJEWk9YRzVaU1VwemRXVnhXbVJ6VWxVNVducFdlbE5sTDBGaFNIZHJOQzlEZGtsblRqWm5kakZSTTBWVU1FRlRPVXg1UW1Ka1l6QnlPVk53ZG1KdFZHRkJUWEJ6WEc1b2ExaFhaMlpQVUV4R1MyMDVWRGhMTTFSaWRYZFpXbFJUWW1sR2JsWkhUa2R3VkZOMmJqVXJjMFV5Y1dOU1dEVk1aV0Z1YkVaeE0wTkNTbXhxYTFOc1hHNWFZMDhyVW5ORVVqUlFOREJGVVdVd2FXUXhhek5UWVc5Sk1IUkJTMHRhTkdOQ2JHUmhTMUpCVkZSWE5IQnpOa2R2U0c5eU9WSTJOREJZWTFaUlN6bFdYRzVsVGxKUGFtTXdUbWx0Um5sS1VXWlVTMk5YYVV4SU1WaGlRVFJVUTI5R1YwaE9kVU5sTDJoV1VWUlNWbkpTT1hWb01YVlVTbkI1VUc0MFFrTXpabnBTWEc1TmRIRnlOWGxoVEc1eWJUTXlZMFFyYjBZclZuWllOMUpsVm10TVpuWk1TazVEVlVSVE9FRjFjVkZMUW1kUlJEQTROMlJIVUZKaFRXSkdPVVY1Ym1WcVhHNDVTM1JxU2xOQmNsaHpZbUp3YmxKUVJ6bFNhMEZVU1RsR2FYQnRURnBhY3pSVGFEYzVPV2RZTlZkUE5YUlZObGRCWVZWcVRVUjFNM3B6VEdaQ05DdFBYRzVOTkU5TVFtbDBMM2t3VnpGQlpsTTBUVVkyVG1wbWNFbGFTVWxzT1drMVowSkxVbkJGUVhCMGRtVnRTVzlHWkZsUlkweFRiMkYwU0ZKbGNIQmxOMmxpWEc1aU1IRm5ZaTlVVm5ORllYaGhaMUIyS3poSU4zcEVjVVpYVVV0Q1oxRkROemR6TlVnMFVqTjFXRFJVUzNKUk9XVTBTVkZOTm05cVVFSXhRazlFV0cxalhHNXJlVEpDVUc1TGNsTkJiMWN5Y2xsWlJYcG5OWHBGUW1weWVuZHNPVTFuSzBsaFFYVnViUzl5ZEVORlowbzJTMlpLVlhkWVEzaFdjVFpqVjIxeVZIaENYRzVoUTJaSFRFb3phaTg1YWxoTlEydEhUMnRVWVVoVWRqbGxjSFV3YkM5MFp6TTVOa3hDU1V4TWFXaG5PVzk2VVZvemJIbHJhemRIT1hoWWNtRkViVzVuWEc1S1RFUTVhM05rTTFoM1MwSm5SV054TDBObVJFaGxZMFZ2V2xaaFFXWkxNelZ2WlhsNFMzSXhTMWNyZERaQlRVbEJaV2huVmtwc1l6bEZjV3h0YUhabFhHNVBlVmg0WkRJMVVqZHRlVXBYWlVSS1lqVktUM1JFYzA5TWNEUm5SWHA0YzJsU05TdFdNbk5WZDNoaU5VUTBTRzlST0VJMk4wdHVWakJrTlROeVZHVnRYRzVuWVVsdmVpczNZMmsxY0habk5VVllOR2xRVTFwMlNWcFNVMk5MYkVST1RUTllSRXAwYldaVWFFZGhUbVE0Um1zNGVFcFhXSFphV2tGdlIwRlpVRTA0WEc1U1dXRlVNakZKTldab2EzcFZZakl2VVdFMlNXSXdNRlpzTXpaTFJ6QlZkRGt6ZGxGNWFESTJNM0pzY25OU1dGSk1jbVkxUXpkUWREaHhURW96YjNWWlhHNVRRbE5EU201V2FHeFhXRGxHWkRZeU1YcG9ibXA1VlZWVGRqQmFiR0ZDTW5wR2VHVkJOalJOU0dzNFFrTjFOWEZqU2pobFVVcEVUVE5MYUM5RVUxaFJYRzVrTmxWWVIwbDFaMGc0VVdVM05qRjJNalZOTlRSWE1rMURRWFpvWjB4c1RTdFVUMDFhVkRoRFoxbENjalY1UjFwaU1sQkdaaXRLYldabVRVMUVORTU2WEc1bGJFcDFTMUpsWXpSaWVscHNORkJHUTFjM09IcEpNaTlEWlRaak9IUm5XR04wT0VwdFRVTTJSMmt4YUVSQ01TOHZabFpJU2pjeFJubFNZakJJWVhWUFhHNVRXSFoyVlhRMU9HRXZMMUJzYzFaVWJHTnVjR0oyVUVWUlJUWTBTalo2VWpsbkswUkxOV2hFT0dvNFVVeFZhRmhrZEhGWVlqVmhVWEE0UXpsek5HNVBYRzVpY1VSUVozVm9MMHRKYVZBMVdTdGhVRTlsYUc1M1BUMWNiaTB0TFMwdFJVNUVJRkJTU1ZaQlZFVWdTMFZaTFMwdExTMWNiaUlzQ2lBZ0ltTnNhV1Z1ZEY5bGJXRnBiQ0k2SUNKNGVIZ3RabUZyWlMxeVpYQnZjblJsY2kxNGVIaEFZMnh2ZFdRdGJXRnlhMlYwY0d4aFkyVXRkRzl2YkhNdWFXRnRMbWR6WlhKMmFXTmxZV05qYjNWdWRDNWpiMjBpTEFvZ0lDSmpiR2xsYm5SZmFXUWlPaUFpTVRBMU9EWXlNRE0zT0RRMU1qazVOekkzT0RJeklpd0tJQ0FpWVhWMGFGOTFjbWtpT2lBaWFIUjBjSE02THk5aFkyTnZkVzUwY3k1bmIyOW5iR1V1WTI5dEwyOHZiMkYxZEdneUwyRjFkR2dpTEFvZ0lDSjBiMnRsYmw5MWNta2lPaUFpYUhSMGNITTZMeTl2WVhWMGFESXVaMjl2WjJ4bFlYQnBjeTVqYjIwdmRHOXJaVzRpTEFvZ0lDSmhkWFJvWDNCeWIzWnBaR1Z5WDNnMU1EbGZZMlZ5ZEY5MWNtd2lPaUFpYUhSMGNITTZMeTkzZDNjdVoyOXZaMnhsWVhCcGN5NWpiMjB2YjJGMWRHZ3lMM1l4TDJObGNuUnpJaXdLSUNBaVkyeHBaVzUwWDNnMU1EbGZZMlZ5ZEY5MWNtd2lPaUFpYUhSMGNITTZMeTkzZDNjdVoyOXZaMnhsWVhCcGN5NWpiMjB2Y205aWIzUXZkakV2YldWMFlXUmhkR0V2ZURVd09TOTRlSGd0Wm1GclpTMXlaWEJ2Y25SbGNpMTRlSGdsTkRCamJHOTFaQzF0WVhKclpYUndiR0ZqWlMxMGIyOXNjeTVwWVcwdVozTmxjblpwWTJWaFkyTnZkVzUwTG1OdmJTSUtmUT09
kind: Secret
metadata:
  name: test-reporting-secret
type: Opaque